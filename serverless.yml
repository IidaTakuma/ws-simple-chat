service: ws-simple-chat

frameworkVersion: '3'

custom:
  region: ap-northeast-1
  connectionsTableName: "connections-table-${self:provider.stage}"
  dynamodb:
    stages:
      - dev
    start:
      docker: true
      port: 8000
      inMemory: true
      migrate: true
      sharedDb: true

provider:
  name: aws
  runtime: ruby2.7
  region: ${self:custom.region}
  stage: dev
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - Fn::GetAtt: [ConnectionsTable, Arn]
  websocketsApiName: ${self:service}
  websocketsApiRouteSelectionExpression: $request.body.message
  environment:
    CONNECTIONS_TABLE: ${self:custom.connectionsTableName}
    REGION: ${self:custom.region}

functions:
  health_check:
    handler: app/functions/health_check.handler
    events:
      - httpApi:
          path: /health_check
          method: get
  connect:
    handler: app/functions/onconnect.handler
    events:
      - websocket:
          route: $connect
  disconnect:
    handler: app/functions/disconnect.handler
    events:
      - websocket:
          route: $disconnect
  sendMessage:
    handler: app/functions/send_message.handler
    events:
      - websocket:
          route: send_message

resources:
  Resources:
    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:custom.connectionsTableName}

plugins:
  - serverless-dynamodb-local
  - serverless-offline
